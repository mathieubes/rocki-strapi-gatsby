{"version":3,"file":"component---src-templates-event-template-tsx-e9671854337bcded9152.js","mappings":"0MAwDe,SAASA,EAAc,GAA4B,IAA5B,KAAEC,EAAI,YAAEC,GAAkB,EAC9D,MAAM,MAAEC,EAAK,KAAEC,GAASF,EACxB,OACEG,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,kBACbD,EAAAA,cAAAA,KAAAA,KAAI,QACJA,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,4BA5CrB,SAAiBH,EAAeC,EAAcH,GAC5CM,QAAQC,IAAIL,EAAOC,GACnB,MAAMK,EAAW,GACXC,EAAYC,IAAO,CAACP,EAAMD,IAAQS,QAAQC,QAAQ,SAASA,QAAQ,QACnEC,EAAUH,IAAO,CAACP,EAAKD,IAAQS,QAAQG,MAAM,SAE7CC,EAAMN,EAAUE,QAAQK,SAAS,EAAG,OAE1C,KAAOD,EAAIE,SAASJ,EAAS,QAC3BL,EAASU,KAAKC,MAAM,GAAGC,KAAK,GAAGC,KAAI,IAAMN,EAAIO,IAAI,EAAG,OAAOX,QAAQY,OAAO,SAG5E,OAAOf,EAASa,KAAI,CAACG,EAAMC,IACzBrB,EAAAA,cAAAA,MAAAA,CAAKsB,IAAKD,EAAOpB,UAAU,kCACxBmB,EAAKH,KAAKN,IACT,MAAMY,EAAQ3B,EAAK4B,MAAKC,IAAuB,IAAtB,cAAEC,GAAe,EACxC,OAAOpB,IAAO,CAACP,EAAMD,EAAOa,IAAMgB,OAAOrB,IAAOoB,GAAgB,MAAM,IAGxE,OACE1B,EAAAA,cAAAA,MAAAA,CAAKsB,IAAKX,EAAKV,UAAU,wCAhCnC,SAAqBmB,EAAcQ,GACjC,OAAa,IAATR,GAAcQ,EAAO,IAEL,IAATR,GAAcQ,EAAO,IAEZ,IAATR,GAAcQ,EAAO,EAKlC,CAuBcC,CAAYR,EAAOS,SAASnB,KAC5BX,EAAAA,cAAAA,MAAAA,KACGW,EACAY,GACCvB,EAAAA,cAAAA,EAAAA,SAAAA,KACEA,EAAAA,cAAAA,MAAAA,CAAK+B,MAAO,GAAIC,OAAQ,GAAIC,IAAG,wBAA0BV,EAAMW,MAAMC,WAAWC,uBAAuBC,MACvGrC,EAAAA,cAACsC,EAAAA,GAAI,CAACC,GAAE,iBAAmBhB,EAAMW,MAAMM,IAAM,kBAKjD,MAKhB,CAQSC,CAAQ3C,EAAOC,EAAMH,EAAK8C,uBAAuBC,QAI1D,C","sources":["webpack://rock-it-gatsby/./src/templates/event-template.tsx"],"sourcesContent":["import React from 'react';\nimport { Link, graphql } from 'gatsby';\nimport moment from 'moment';\nimport './event-template.sass';\n\nfunction isExtraDays(week: number, date: number) {\n  if (week === 0 && date > 10) {\n    return true;\n  } else if (week === 5 && date < 10) {\n    return true;\n  } else if (week === 4 && date < 10) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction getDate(month: number, year: number, data: any[]) {\n  console.log(month, year);\n  const calendar = [];\n  const startDate = moment([year, month]).clone().startOf('month').startOf('week');\n  const endDate = moment([year,month]).clone().endOf('month');\n\n  const day = startDate.clone().subtract(1, 'day');\n\n  while (day.isBefore(endDate, 'day')) {\n    calendar.push(Array(7).fill(0).map(() => day.add(1, 'day').clone().format('DD')));\n  }\n\n  return calendar.map((week, index) => (\n    <div key={index} className=\"event-template__calendar__week\">\n      {week.map((day) => {\n        const entry = data.find(({ startDateTime }) => {\n          return moment([year, month, day]).isSame(moment(startDateTime), 'day');\n        });\n\n        return (\n          <div key={day} className=\"event-template__calendar__week__day\">\n            {!isExtraDays(index, parseInt(day)) && (\n              <div>\n                {day}\n                {entry && (\n                  <>\n                    <img width={64} height={64} src={`http://localhost:1337${entry.event.event_type.defaultIconForCalendar.url}`} />\n                    <Link to={`/event-detail/${entry.event.id}`}>Je veux voir</Link>\n                  </>\n                )}\n              </div>\n            )}\n          </div>\n        );\n      })}\n    </div>\n  ));\n}\n\nexport default function EventTemplate({ data, pageContext }: any) {\n  const { month, year } = pageContext;\n  return (\n    <div className=\"event-template\">\n      <h1>TOTO</h1>\n      <div className=\"event-template__calendar\">\n        {getDate(month, year, data.allStrapiScheduleEntry.nodes)}\n      </div>\n    </div>\n  );\n}\n\nexport const query = graphql`\n  query($start: Date!, $end: Date!) {\n    allStrapiScheduleEntry(\n      filter: {\n        startDateTime: {\n          lt: $end\n          gt: $start\n        }\n      }\n    ) {\n      nodes {\n        startDateTime\n          event {\n            id\n            priceOptions {\n              amount\n            }\n            event_type {\n              defaultIconForCalendar {\n                url\n              }\n              defaultTitlePrefix\n            }\n          }\n      }\n    }\n  }\n`;\n"],"names":["EventTemplate","data","pageContext","month","year","React","className","console","log","calendar","startDate","moment","clone","startOf","endDate","endOf","day","subtract","isBefore","push","Array","fill","map","add","format","week","index","key","entry","find","_ref","startDateTime","isSame","date","isExtraDays","parseInt","width","height","src","event","event_type","defaultIconForCalendar","url","Link","to","id","getDate","allStrapiScheduleEntry","nodes"],"sourceRoot":""}